// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String?
  email String?
  emailVerified DateTime?
  image String?
  hashedPassword String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  favoriteIds String[] @db.ObjectId

  accounts Account[]
}

model Account {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  type String
  provider String
  providerAccountId String
  refresh_token String? @db.String
  access_token String? @db.String
  expires_at Int?
  token_type String?
  scope String?
  id_token String? @db.String
  session_state String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model DiveSite {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  siteID Int
  name String
  description1 String?
  description2 String?
  imageSrc String?
  createdAt DateTime @default(now())
  category String?
  longitude String
  latitude String
  country String?
  region String?
  rating Float @default(0)
  loggedDives Int @default(0)
  loggedUsers Int @default(0)
  averageMaxDepth Int @default(0)
  averageDivetime Int @default(0)
  averageVis Int @default(0)
  animalIDs String[] @db.ObjectId

  animals Animal[] @relation(fields: [animalIDs], references: [id])
}

model Animal {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  animalID String @unique
  name String @unique
  diveSiteIDs String[] @db.ObjectId

  diveSites DiveSite[] @relation(fields: [diveSiteIDs], references: [id])
}